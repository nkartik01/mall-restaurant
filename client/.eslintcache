[{"C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\index.js":"1","C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\App.js":"2","C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\reportWebVitals.js":"3","C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\components\\Landing.js":"4","C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\components\\AdminLogin.js":"5","C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\components\\PermissionsSetup.js":"6","C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\components\\OperatorSignup.js":"7","C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\components\\OperatorEdit.js":"8","C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\components\\OperatorLogin.js":"9","C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\components\\ListOperators.js":"10","C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\components\\TakeOrder.js":"11","C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\components\\Header.js":"12","C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\components\\Footer.js":"13","C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\components\\RegisterRFID.js":"14","C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\components\\ManipulateRFID.js":"15","C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\AlertDiv.js":"16","C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\redux\\store.js":"17","C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\redux\\rootReducer.js":"18","C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\redux\\reducers\\loadedData.js":"19","C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\redux\\types\\loadedData.js":"20","C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\redux\\action\\loadedData.js":"21","C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\components\\BillList.js":"22","C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\components\\Bill.js":"23","C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\components\\Payment.js":"24","C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\components\\OrderSheet.js":"25","C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\components\\Booking.js":"26","C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\components\\Report.js":"27"},{"size":657,"mtime":1611784437903,"results":"28","hashOfConfig":"29"},{"size":2168,"mtime":1612443918917,"results":"30","hashOfConfig":"29"},{"size":375,"mtime":1611513154899,"results":"31","hashOfConfig":"29"},{"size":5133,"mtime":1612474604164,"results":"32","hashOfConfig":"29"},{"size":1737,"mtime":1612470182359,"results":"33","hashOfConfig":"29"},{"size":3346,"mtime":1612470182359,"results":"34","hashOfConfig":"29"},{"size":2667,"mtime":1612470182359,"results":"35","hashOfConfig":"29"},{"size":4794,"mtime":1612470110985,"results":"36","hashOfConfig":"29"},{"size":1824,"mtime":1612470182359,"results":"37","hashOfConfig":"29"},{"size":1354,"mtime":1612470111145,"results":"38","hashOfConfig":"29"},{"size":5206,"mtime":1612470182359,"results":"39","hashOfConfig":"29"},{"size":2130,"mtime":1612468664411,"results":"40","hashOfConfig":"29"},{"size":229,"mtime":1611655823770,"results":"41","hashOfConfig":"29"},{"size":1607,"mtime":1612470182359,"results":"42","hashOfConfig":"29"},{"size":11944,"mtime":1612470110985,"results":"43","hashOfConfig":"29"},{"size":568,"mtime":1612268610411,"results":"44","hashOfConfig":"29"},{"size":251,"mtime":1611781343649,"results":"45","hashOfConfig":"29"},{"size":199,"mtime":1611781780013,"results":"46","hashOfConfig":"29"},{"size":347,"mtime":1611786587743,"results":"47","hashOfConfig":"29"},{"size":27,"mtime":1611781966336,"results":"48","hashOfConfig":"29"},{"size":140,"mtime":1611782131207,"results":"49","hashOfConfig":"29"},{"size":2427,"mtime":1612470111145,"results":"50","hashOfConfig":"29"},{"size":6959,"mtime":1612476151541,"results":"51","hashOfConfig":"29"},{"size":22693,"mtime":1612476294293,"results":"52","hashOfConfig":"29"},{"size":22817,"mtime":1612508437616,"results":"53","hashOfConfig":"29"},{"size":757,"mtime":1612376740540,"results":"54","hashOfConfig":"29"},{"size":8229,"mtime":1612520580907,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"1xr1jok",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"58"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"58"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\index.js",[],["114","115"],"C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\App.js",[],"C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\reportWebVitals.js",[],"C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\components\\Landing.js",[],"C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\components\\AdminLogin.js",[],"C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\components\\PermissionsSetup.js",[],"C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\components\\OperatorSignup.js",[],"C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\components\\OperatorEdit.js",[],"C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\components\\OperatorLogin.js",[],"C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\components\\ListOperators.js",[],"C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\components\\TakeOrder.js",[],"C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\components\\Header.js",[],"C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\components\\Footer.js",[],"C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\components\\RegisterRFID.js",[],"C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\components\\ManipulateRFID.js",["116","117"],"import axios from \"axios\";\r\nimport React, { Component, Fragment } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport AlertDiv from \"../AlertDiv\";\r\nimport { setData } from \"../redux/action/loadedData\";\r\n\r\nexport default withRouter(\r\n  class ManipulateRFID extends Component {\r\n    state = { uid: \"\", card: {}, cards: [] };\r\n    getCard = async (e) => {\r\n      try {\r\n        e.preventDefault();\r\n        var res = await axios.get(require(\"../config.json\").url + \"card/getCard/\" + this.state.uid, {\r\n          headers: { \"x-auth-token\": localStorage.getItem(\"token\") },\r\n        });\r\n        res = res.data;\r\n        this.setState({ card: res.card, cards: [] });\r\n      } catch (err) {\r\n        console.log(err, err.response);\r\n        AlertDiv(\"red\", \"Error, \" + err.response.data);\r\n        this.setState({ uid: \"\" });\r\n      }\r\n    };\r\n    onChange = (e) => {\r\n      console.log(this.props);\r\n      this.props.store.dispatch(setData({ hi: \"bye\" }));\r\n      e.preventDefault();\r\n      this.setState({ [e.target.id]: e.target.value });\r\n    };\r\n    assign = async (e) => {\r\n      e.preventDefault();\r\n      try {\r\n        await axios.post(\r\n          require(\"../config.json\").url + \"card/assign\",\r\n          {\r\n            uid: this.state.uid,\r\n            holder: this.state.card.holder,\r\n            balance: this.state.card.balance,\r\n          },\r\n          { headers: { \"x-auth-token\": localStorage.getItem(\"token\") } }\r\n        );\r\n        AlertDiv(\"green\", \"Card assigned successfully\");\r\n        this.setState({ card: {}, uid: \"\" });\r\n      } catch (err) {\r\n        console.log(err, err.response);\r\n        AlertDiv(\"red\", err.response ? err.response.data : \"Failed to assign Card\");\r\n      }\r\n    };\r\n    retire = async (e) => {\r\n      e.preventDefault();\r\n      try {\r\n        await axios.post(require(\"../config.json\").url + \"card/retire\", { uid: this.state.uid }, { headers: { \"x-auth-token\": localStorage.getItem(\"token\") } });\r\n        AlertDiv(\"green\", \"Retired Successfully\");\r\n        this.setState({ card: {}, uid: \"\" });\r\n      } catch (err) {\r\n        console.log(err, err.response);\r\n        AlertDiv(\"red\", err.response ? err.response.data : \"Could Not retire card properly\");\r\n      }\r\n    };\r\n    render() {\r\n      var card = this.state.card;\r\n      return (\r\n        <div>\r\n          {Object.keys(this.state.card).length === 0 ? (\r\n            <Fragment>\r\n              <form onSubmit={(e) => this.getCard(e)}>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    autoFocus\r\n                    type=\"text\"\r\n                    required\r\n                    name={\"uid\"}\r\n                    placeholder=\"uid\"\r\n                    id=\"uid\"\r\n                    autoComplete=\"off\"\r\n                    value={this.state.uid}\r\n                    onChange={(e) => this.onChange(e)}\r\n                    className=\"form-control\"\r\n                  />\r\n                </div>\r\n                <input type=\"submit\" value=\"Submit\" className=\"btn btn-primary\" />\r\n              </form>\r\n              <form\r\n                onSubmit={async (e) => {\r\n                  e.preventDefault();\r\n                  var res = await axios.get(require(\"../config.json\").url + \"card/searchByPhone/\" + this.state.phone, {\r\n                    headers: { \"x-auth-token\": localStorage.getItem(\"token\") },\r\n                  });\r\n                  res = res.data;\r\n                  if (res.cards.length === 0) AlertDiv(\"red\", \"No Cards Found\");\r\n                  else this.setState({ card: {}, uid: \"\", cards: res.cards });\r\n                }}\r\n              >\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    autoComplete=\"off\"\r\n                    type=\"number\"\r\n                    required\r\n                    name=\"phone\"\r\n                    placeholder=\"Phone Number\"\r\n                    id=\"phone\"\r\n                    value={this.state.phone}\r\n                    onChange={(e) => this.onChange(e)}\r\n                    className=\"form-control\"\r\n                  />\r\n                </div>\r\n                <input type=\"submit\" value=\"Search\" className=\"btn btn-primary\" />\r\n              </form>\r\n            </Fragment>\r\n          ) : (\r\n            <Fragment>\r\n              <center>\r\n                <h3>UID: {this.state.uid}</h3>\r\n              </center>\r\n              <br />\r\n              <form onSubmit={(e) => this.assign(e)}>\r\n                <table className=\"table table-bordered\">\r\n                  <tbody>\r\n                    <tr>\r\n                      <th scope=\"row\">Holder Name</th>\r\n                      <td>\r\n                        {card.holder.assigned ? (\r\n                          card.holder.name\r\n                        ) : (\r\n                          <input\r\n                            required\r\n                            autoFocus\r\n                            type=\"text\"\r\n                            name={\"holderName\"}\r\n                            value={card.holder.name}\r\n                            onChange={(e) => {\r\n                              e.preventDefault();\r\n                              card.holder.name = e.target.value;\r\n                              this.setState({ card });\r\n                            }}\r\n                          />\r\n                        )}\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <th scope=\"row\">Holder mobile number</th>\r\n                      <td>\r\n                        {card.holder.assigned ? (\r\n                          card.holder.mobile\r\n                        ) : (\r\n                          <input\r\n                            required\r\n                            type=\"text\"\r\n                            name={\"holderMobile\"}\r\n                            value={card.holder.mobile}\r\n                            onChange={(e) => {\r\n                              e.preventDefault();\r\n                              card.holder.mobile = e.target.value;\r\n                              this.setState({ card });\r\n                            }}\r\n                          />\r\n                        )}\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <th scope=\"row\">Balance</th>\r\n                      <td>\r\n                        {card.holder.assigned ? (\r\n                          <Fragment>{card.balance}</Fragment>\r\n                        ) : (\r\n                          <input\r\n                            required\r\n                            type=\"number\"\r\n                            name={\"holderbalance\"}\r\n                            value={card.holder.balance}\r\n                            onChange={(e) => {\r\n                              e.preventDefault();\r\n                              card.balance = e.target.value;\r\n                              this.setState({ card });\r\n                            }}\r\n                          />\r\n                        )}\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n                {card.holder.assigned ? (\r\n                  <button className=\"btn btn-primary\" onClick={(e) => this.retire(e)}>\r\n                    Retire\r\n                  </button>\r\n                ) : (\r\n                  <input type=\"submit\" value=\"Assign\" className=\"btn btn-primary\" />\r\n                )}\r\n              </form>\r\n              {card.holder.assigned ? (\r\n                <form\r\n                  onSubmit={async (e) => {\r\n                    e.preventDefault();\r\n                    console.log(e.target);\r\n                    var res = await axios.post(\r\n                      require(\"../config.json\").url + \"card/addAmount\",\r\n                      { amount: this.state.toAdd, uid: this.state.uid },\r\n                      { headers: { \"x-auth-token\": localStorage.getItem(\"token\") } }\r\n                    );\r\n                    console.log(res.data);\r\n                    AlertDiv(\"green\", \"Amount Added\");\r\n                    this.getCard(e);\r\n                  }}\r\n                >\r\n                  <input\r\n                    type=\"number\"\r\n                    min={0}\r\n                    required\r\n                    value={this.state.toAdd}\r\n                    onChange={(e) => {\r\n                      e.preventDefault();\r\n                      this.setState({ toAdd: parseInt(e.target.value) });\r\n                    }}\r\n                    id=\"toAdd\"\r\n                    name=\"toAdd\"\r\n                    placeholder=\"Amount to add\"\r\n                    className=\"form-control\"\r\n                  />\r\n                  <input type=\"submit\" value=\"Add money to card\" className=\"btn btn-primary\" />\r\n                </form>\r\n              ) : null}\r\n              <button\r\n                className=\"btn btn-primary\"\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  this.setState({ uid: \"\", card: {} });\r\n                }}\r\n              >\r\n                Clear\r\n              </button>\r\n              <table className=\"table table-borders\">\r\n                <thead>\r\n                  <tr>\r\n                    <th scope=\"col\">Time</th>\r\n                    <th scope=\"col\">Type</th>\r\n                    <th scope=\"col\">By</th>\r\n                    <th scope=\"col\">Details</th>\r\n                    <th></th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {card.transactions\r\n                    .filter((tran, id) => {\r\n                      if (id > 5) return false;\r\n                      return true;\r\n                    })\r\n                    .map((tran, id) => {\r\n                      return (\r\n                        <tr>\r\n                          <td>{new Date(parseInt(tran.at)).toLocaleString(\"en-GB\")}</td>\r\n                          <td>{tran.type}</td>\r\n                          <td>{tran.by}</td>\r\n                          <td>{JSON.stringify(tran.details)}</td>\r\n                          <td>\r\n                            {tran.type === \"deduction\" ? (\r\n                              <button\r\n                                className=\"btn btn-primary\"\r\n                                onClick={(e) => {\r\n                                  e.preventDefault();\r\n                                  console.log(this.props.history.push(\"/bill/\" + tran.details.bill));\r\n                                }}\r\n                              >\r\n                                Check Bill\r\n                              </button>\r\n                            ) : null}\r\n                          </td>\r\n                        </tr>\r\n                      );\r\n                    })}\r\n                </tbody>\r\n              </table>\r\n            </Fragment>\r\n          )}\r\n          {this.state.cards.length !== 0 ? (\r\n            <Fragment>\r\n              <table className=\"table table-bordered\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Card Number</th>\r\n                    <th>Holder Name</th>\r\n                    <th>Balance</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {this.state.cards.map((card, _) => {\r\n                    return (\r\n                      <tr\r\n                        onClick={(e) => {\r\n                          this.state.uid = card.id;\r\n                          this.state.phone = \"\";\r\n                          this.getCard(e);\r\n                        }}\r\n                      >\r\n                        <td>{card.uid}</td>\r\n                        <td> {card.holder.name} </td>\r\n                        <td>{card.balance}</td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </table>\r\n            </Fragment>\r\n          ) : null}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n);\r\n","C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\AlertDiv.js",[],"C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\redux\\store.js",[],"C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\redux\\rootReducer.js",[],"C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\redux\\reducers\\loadedData.js",[],"C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\redux\\types\\loadedData.js",[],"C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\redux\\action\\loadedData.js",[],"C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\components\\BillList.js",[],"C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\components\\Bill.js",[],"C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\components\\Payment.js",["118"],"import React, { Component, Fragment } from \"react\";\r\nimport axios from \"axios\";\r\nimport AlertDiv from \"../AlertDiv\";\r\nimport { Alert } from \"react-bootstrap\";\r\nexport default class Payment extends Component {\r\n  state = { partial: false, partialAmount: 0, upiId: \"\", cardId: \"\", discType: \"none\", discReason: \"By operator\" };\r\n  getBill = async () => {\r\n    try {\r\n      var bill = await axios.get(require(\"../config.json\").url + \"bill/getBill/\" + this.props.bill, {\r\n        headers: { \"x-auth-token\": localStorage.getItem(\"token\") },\r\n      });\r\n      bill = bill.data;\r\n      this.setState({ bill });\r\n      if (bill.discType && bill.discType !== \"none\") {\r\n        this.setState({ discType: bill.discType, discAmount: bill.discAmount, discPerc: bill.discPerc });\r\n      }\r\n    } catch (err) {\r\n      console.log(err, err.response);\r\n    }\r\n  };\r\n  componentDidMount() {\r\n    this.getBill();\r\n  }\r\n  render() {\r\n    // this.setState\r\n    return (\r\n      <div>\r\n        <form\r\n          onSubmit={async (e) => {\r\n            console.log(this.props.table);\r\n            e.preventDefault();\r\n            await axios.post(\r\n              require(\"../config.json\").url + \"bill/addDiscount\",\r\n              {\r\n                bill: this.props.bill,\r\n                discType: this.state.discType,\r\n                discAmount: Math.round(this.state.discAmount),\r\n                discReason: this.state.discReason,\r\n                table: this.props.table,\r\n              },\r\n              { headers: { \"x-auth-token\": localStorage.getItem(\"token\") } }\r\n            );\r\n\r\n            this.props.afterDisc();\r\n            AlertDiv(\"green\", \"Discount Applied\");\r\n            this.getBill();\r\n          }}\r\n        >\r\n          <table align=\"center\" className=\"table table-bordered\">\r\n            <tbody>\r\n              <tr>\r\n                <td>\r\n                  <label htmlFor=\"discType\">Discount type</label>\r\n                </td>\r\n                <td>\r\n                  <select\r\n                    id=\"discType\"\r\n                    value={this.state.discType}\r\n                    required\r\n                    onChange={(e) => {\r\n                      e.preventDefault();\r\n                      this.setState({ discType: e.target.value });\r\n                    }}\r\n                  >\r\n                    <option value=\"none\">none</option>\r\n                    <option value=\"membership\">membership</option>\r\n                    <option value=\"regularCustomer\">Regular Customer</option>\r\n                    <option value=\"bulk order\">Bulk Order</option>\r\n                  </select>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n          <table align=\"center\" className=\"table table-bordered\">\r\n            <tbody>\r\n              {this.state.discType !== \"none\" ? (\r\n                <Fragment>\r\n                  <tr>\r\n                    <td>\r\n                      <label htmlFor=\"discPerc\">Discount percentage</label>\r\n                    </td>\r\n                    <td>\r\n                      <input\r\n                        className=\"form-control\"\r\n                        type=\"number\"\r\n                        id=\"discPerc\"\r\n                        value={this.state.discPerc}\r\n                        required\r\n                        autoComplete=\"off\"\r\n                        onChange={(e) => {\r\n                          e.preventDefault();\r\n                          this.setState({ discPerc: e.target.value, discAmount: (e.target.value * this.props.orderHistory.sum) / 100 });\r\n                        }}\r\n                      />\r\n                    </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>\r\n                      <label htmlFor=\"discAmount\">Discount Amount</label>\r\n                    </td>\r\n                    <td>\r\n                      <input\r\n                        step={0.1}\r\n                        className=\"form-control\"\r\n                        type=\"number\"\r\n                        id=\"discAmount\"\r\n                        value={this.state.discAmount}\r\n                        required\r\n                        autoComplete=\"off\"\r\n                        onChange={(e) => {\r\n                          e.preventDefault();\r\n                          this.setState({ discPerc: (e.target.value * 100) / this.props.orderHistory.sum, discAmount: e.target.value });\r\n                        }}\r\n                      />\r\n                    </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>\r\n                      <label htmlFor=\"discReason\">Reason</label>\r\n                    </td>\r\n                    <td>\r\n                      <input\r\n                        className=\"form-control\"\r\n                        type=\"text\"\r\n                        id=\"discReason\"\r\n                        value={this.state.discReason}\r\n                        onChange={async (e) => {\r\n                          e.preventDefault();\r\n                          this.setState({ discReason: e.target.value });\r\n                        }}\r\n                      />\r\n                    </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td colSpan={2}>\r\n                      <input type=\"submit\" value=\"Apply Discount\" className=\"btn-secondary\" />\r\n                    </td>\r\n                  </tr>\r\n                </Fragment>\r\n              ) : null}\r\n            </tbody>\r\n          </table>\r\n        </form>\r\n        <form id=\"partialForm\" onSubmit={(e) => e.preventDefault()}>\r\n          <table align=\"center\" className=\"table table-bordered\">\r\n            <tbody>\r\n              <tr>\r\n                <td>\r\n                  <label class=\"switch\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      id=\"partial\"\r\n                      disabled={this.props.disable}\r\n                      // disabled={this.props.table.orderChange.sum !== 0 || this.props.table.orderHistory.sum === 0 ? true : false}\r\n                      value={this.state.partial}\r\n                      onChange={(e) => {\r\n                        this.setState({ partial: e.target.checked });\r\n                      }}\r\n                    />\r\n                    <span class=\"slider round\"></span>\r\n                  </label>\r\n                </td>\r\n                <td>\r\n                  <label htmlFor=\"partial\">Partial Payment?</label>\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td colSpan={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    type=\"number\"\r\n                    id=\"partialAmount\"\r\n                    max={this.props.amount}\r\n                    min={1}\r\n                    required\r\n                    placeholder=\"Partial Amount\"\r\n                    value={this.state.partialAmount}\r\n                    onChange={(e) => {\r\n                      e.preventDefault();\r\n                      var value = e.target.value === \"\" ? 0 : parseInt(e.target.value);\r\n                      this.setState({ partialAmount: value });\r\n                    }}\r\n                    hidden={!this.state.partial || this.props.disable ? true : false}\r\n                    disabled={!this.state.partial || this.props.disable ? true : false}\r\n                  />\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td colSpan={2}>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    disabled={!this.state.partial || this.props.disable ? true : false}\r\n                    type=\"text\"\r\n                    required\r\n                    placeholder=\"Partial privalage given to\"\r\n                    id=\"to\"\r\n                    name=\"to\"\r\n                    value={this.state.to}\r\n                    onChange={(e) => {\r\n                      e.preventDefault();\r\n                      this.setState({ to: e.target.value });\r\n                    }}\r\n                    hidden={!this.state.partial || this.props.disable ? true : false}\r\n                  />\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </form>\r\n        <form\r\n          onSubmit={async (e) => {\r\n            e.preventDefault();\r\n            try {\r\n              // console.log()\r\n              var tranAmount = parseInt(this.state.partial ? parseInt(this.state.partialAmount) : parseInt(this.props.amount));\r\n              if (!window.confirm(\"Are you sure you want to deduct Rs.\" + tranAmount + \" from this card?\")) return;\r\n              await axios.post(\r\n                require(\"../config.json\").url + \"card/deductAmount\",\r\n                {\r\n                  // amount: this.props.table.partial ? partAmont) : this.props.table.orderHistory.sum,\r\n\r\n                  amount: tranAmount,\r\n                  to: this.state.partial ? this.state.to : undefined,\r\n                  uid: this.state.uid,\r\n                  bill: this.props.bill,\r\n                  table: !this.props.table ? false : this.props.table,\r\n                },\r\n                { headers: { \"x-auth-token\": localStorage.getItem(\"token\") } }\r\n              );\r\n              AlertDiv(\"green\", \"Paid\");\r\n              try {\r\n                await axios.post(\r\n                  require(\"../config.json\").url + \"bill/printBill\",\r\n                  {\r\n                    restaurant: this.props.restaurant,\r\n                    bill: this.props.bill,\r\n                    balance: this.props.amount,\r\n                    orderHistory: this.props.orderHistory,\r\n                    paid: tranAmount,\r\n                    printer: localStorage.getItem(\"printer\"),\r\n                    method: \"rfid\",\r\n                    uid: this.state.uid,\r\n                  },\r\n                  { headers: { \"x-auth-token\": localStorage.getItem(\"token\") } }\r\n                );\r\n              } catch (err) {\r\n                console.log(err);\r\n                AlertDiv(\"red\", \"Couldn't Print Bill\");\r\n              }\r\n              document.getElementById(\"partial\").checked = false;\r\n              this.setState({ partial: false, partialAmount: 0, uid: \"\" });\r\n\r\n              if (!!this.props.callBack) {\r\n                this.props.callBack(tranAmount);\r\n              }\r\n            } catch (err) {\r\n              if (!!this.props.fallBack) {\r\n                this.props.fallBack();\r\n              }\r\n              this.setState({ uid: \"\" });\r\n              console.log(err, err.response);\r\n              AlertDiv(\"red\", \"Couldn't Deduct Money, \" + err.response.data);\r\n            }\r\n          }}\r\n        >\r\n          <table align=\"center\" className=\"table table-bordered\">\r\n            <tbody>\r\n              <tr>\r\n                <td>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    placeholder=\"UID\"\r\n                    type=\"text\"\r\n                    id=\"uid\"\r\n                    value={this.state.uid}\r\n                    autoFocus\r\n                    autoComplete=\"off\"\r\n                    onChange={(e) => {\r\n                      e.preventDefault();\r\n                      this.setState({ uid: e.target.value });\r\n                    }}\r\n                    required\r\n                    disabled={this.props.disable}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input className=\"form-control\" type=\"submit\" value=\"Pay by Card\" disabled={this.props.disable} />\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </form>\r\n        <form\r\n          id=\"cashForm\"\r\n          onSubmit={async (e) => {\r\n            e.preventDefault();\r\n\r\n            try {\r\n              // console.log()\r\n              var tranAmount = parseInt(this.state.partial ? parseInt(this.state.partialAmount) : parseInt(this.props.amount));\r\n              var received = parseInt(prompt(\"Cash Tendered by Customer\"));\r\n              if (!received || received === 0) return;\r\n              alert(\"Return Rs. \" + received + \" - \" + tranAmount + \" = \" + (received - tranAmount));\r\n              if (!window.confirm(\"Are you sure you received Rs.\" + tranAmount + \" for this order in Cash?\")) return;\r\n              await axios.post(\r\n                require(\"../config.json\").url + \"bill/byCash\",\r\n                {\r\n                  // amount: this.props.table.partial ? partAmont) : this.props.table.orderHistory.sum,\r\n\r\n                  amount: tranAmount,\r\n                  to: this.state.partial ? this.state.to : undefined,\r\n                  bill: this.props.bill,\r\n                  table: !this.props.table ? false : this.props.table,\r\n                },\r\n                { headers: { \"x-auth-token\": localStorage.getItem(\"token\") } }\r\n              );\r\n              document.getElementById(\"partial\").checked = false;\r\n              this.setState({ partial: false, partialAmount: 0, uid: \"\" });\r\n              AlertDiv(\"yellow\", \"Paid\");\r\n              try {\r\n                await axios.post(\r\n                  require(\"../config.json\").url + \"bill/printBill\",\r\n                  {\r\n                    restaurant: this.props.restaurant,\r\n                    bill: this.props.bill,\r\n                    balance: this.props.amount,\r\n                    orderHistory: this.props.orderHistory,\r\n                    paid: tranAmount,\r\n                    printer: localStorage.getItem(\"printer\"),\r\n                    method: \"cash\",\r\n                  },\r\n                  { headers: { \"x-auth-token\": localStorage.getItem(\"token\") } }\r\n                );\r\n              } catch (err) {\r\n                console.log(err);\r\n                AlertDiv(\"red\", \"Couldn't Print Bill\");\r\n              }\r\n              if (!!this.props.callBack) {\r\n                this.props.callBack(tranAmount);\r\n              }\r\n            } catch (err) {\r\n              if (!!this.props.fallBack) {\r\n                this.props.fallBack();\r\n              }\r\n              this.setState({ uid: \"\" });\r\n              console.log(err, err.response);\r\n              AlertDiv(\"red\", \"Couldn't Deduct Money, \" + err.response.data);\r\n            }\r\n          }}\r\n        >\r\n          <table align=\"center\" className=\"table table-bordered\">\r\n            <tbody>\r\n              <tr>\r\n                <td colSpan={2}>\r\n                  <input className=\"form-control\" type=\"submit\" value=\"Receive Cash\" disabled={this.props.disable} />\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </form>\r\n        <form\r\n          onSubmit={async (e) => {\r\n            e.preventDefault();\r\n            try {\r\n              // console.log()\r\n              var tranAmount = parseInt(this.state.partial ? parseInt(this.state.partialAmount) : parseInt(this.props.amount));\r\n              if (!window.confirm(\"Are you sure you received Rs.\" + tranAmount + \" for this order in UPI transaction?\")) return;\r\n              await axios.post(\r\n                require(\"../config.json\").url + \"bill/byUpi\",\r\n                {\r\n                  // amount: this.props.table.partial ? partAmont) : this.props.table.orderHistory.sum,\r\n                  tranId: this.state.upiId,\r\n                  amount: tranAmount,\r\n                  to: this.state.partial ? this.state.to : undefined,\r\n                  bill: this.props.bill,\r\n                  table: !this.props.table ? false : this.props.table,\r\n                },\r\n                { headers: { \"x-auth-token\": localStorage.getItem(\"token\") } }\r\n              );\r\n              document.getElementById(\"partial\").checked = false;\r\n              this.setState({ partial: false, partialAmount: 0, uid: \"\" });\r\n              AlertDiv(\"green\", \"Paid\");\r\n              try {\r\n                await axios.post(\r\n                  require(\"../config.json\").url + \"bill/printBill\",\r\n                  {\r\n                    restaurant: this.props.restaurant,\r\n                    bill: this.props.bill,\r\n                    balance: this.props.amount,\r\n                    orderHistory: this.props.orderHistory,\r\n                    paid: tranAmount,\r\n                    printer: localStorage.getItem(\"printer\"),\r\n                    method: \"upi\",\r\n                    tranId: this.state.upiId,\r\n                  },\r\n                  { headers: { \"x-auth-token\": localStorage.getItem(\"token\") } }\r\n                );\r\n              } catch (err) {\r\n                console.log(err);\r\n                AlertDiv(\"red\", \"Couldn't print bill\");\r\n              }\r\n              if (!!this.props.callBack) {\r\n                this.props.callBack(tranAmount);\r\n              }\r\n            } catch (err) {\r\n              if (!!this.props.fallBack) {\r\n                this.props.fallBack();\r\n              }\r\n              this.setState({ uid: \"\", cardId: \"\", upiId: \"\", partial: false });\r\n              console.log(err, err.response);\r\n              AlertDiv(\"red\", \"Couldn't Deduct Money, \" + err.response.data);\r\n            }\r\n          }}\r\n        >\r\n          <table align=\"center\" className=\"table table-bordered\">\r\n            <tbody>\r\n              <tr>\r\n                <td>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    type=\"text\"\r\n                    name=\"upiId\"\r\n                    value={this.state.upiId}\r\n                    id=\"upiId\"\r\n                    onChange={(e) => {\r\n                      e.preventDefault();\r\n                      this.setState({ upiId: e.target.value });\r\n                    }}\r\n                    placeholder=\"Enter UPI transaction ID\"\r\n                    required\r\n                    autoComplete=\"off\"\r\n                    disabled={this.props.disable}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input className=\"form-control\" type=\"submit\" value=\"received UPI Payment\" disabled={this.props.disable} />\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </form>\r\n        <form\r\n          onSubmit={async (e) => {\r\n            e.preventDefault();\r\n            try {\r\n              // console.log()\r\n              var tranAmount = parseInt(this.state.partial ? parseInt(this.state.partialAmount) : parseInt(this.props.amount));\r\n              if (!window.confirm(\"Are you sure you received Rs.\" + tranAmount + \" for this order in Card Swipe transaction?\")) return;\r\n              await axios.post(\r\n                require(\"../config.json\").url + \"bill/byCard\",\r\n                {\r\n                  // amount: this.props.table.partial ? partAmont) : this.props.table.orderHistory.sum,\r\n                  tranId: this.state.cardId,\r\n                  amount: tranAmount,\r\n                  to: this.state.partial ? this.state.to : undefined,\r\n                  bill: this.props.bill,\r\n                  table: !this.props.table ? false : this.props.table,\r\n                },\r\n                { headers: { \"x-auth-token\": localStorage.getItem(\"token\") } }\r\n              );\r\n              document.getElementById(\"partial\").checked = false;\r\n              this.setState({ partial: false, partialAmount: 0, uid: \"\" });\r\n              AlertDiv(\"green\", \"Paid\");\r\n              try {\r\n                await axios.post(\r\n                  require(\"../config.json\").url + \"bill/printBill\",\r\n                  {\r\n                    restaurant: this.props.restaurant,\r\n                    bill: this.props.bill,\r\n                    balance: this.props.amount,\r\n                    orderHistory: this.props.orderHistory,\r\n                    paid: tranAmount,\r\n                    printer: localStorage.getItem(\"printer\"),\r\n                    method: \"cardSwipe\",\r\n                    tranId: this.state.cardId,\r\n                  },\r\n                  { headers: { \"x-auth-token\": localStorage.getItem(\"token\") } }\r\n                );\r\n              } catch (err) {\r\n                console.log(err);\r\n                AlertDiv(\"red\", \"Couldn't print bill\");\r\n              }\r\n              if (!!this.props.callBack) {\r\n                this.props.callBack(tranAmount);\r\n              }\r\n            } catch (err) {\r\n              if (!!this.props.fallBack) {\r\n                this.props.fallBack();\r\n              }\r\n              this.setState({ uid: \"\", cardId: \"\", upiId: \"\", partial: false });\r\n              console.log(err, err.response);\r\n              AlertDiv(\"red\", \"Couldn't Deduct Money, \" + err.response.data);\r\n            }\r\n          }}\r\n        >\r\n          <table align=\"center\" className=\"table table-bordered\">\r\n            <tbody>\r\n              <tr>\r\n                <td>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    type=\"text\"\r\n                    name=\"cardId\"\r\n                    value={this.state.cardId}\r\n                    id=\"cardId\"\r\n                    disabled={this.props.disable}\r\n                    onChange={(e) => {\r\n                      e.preventDefault();\r\n                      this.setState({ cardId: e.target.value });\r\n                    }}\r\n                    placeholder=\"Enter card transaction ID\"\r\n                    required\r\n                    autoComplete=\"off\"\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input className=\"form-control\" type=\"submit\" value=\"received card Payment\" disabled={this.props.disable} />\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </form>\r\n        <table align=\"center\" className=\"table table-bordered\">\r\n          <tbody>\r\n            <tr>\r\n              <td colSpan={2}>\r\n                <button\r\n                  className=\"btn  btn-primary\"\r\n                  onClick={async (e) => {\r\n                    e.preventDefault();\r\n                    await axios.post(\r\n                      require(\"../config.json\").url + \"bill/printBill\",\r\n                      {\r\n                        restaurant: this.props.restaurant,\r\n                        bill: this.props.bill,\r\n                        balance: this.props.amount,\r\n                        orderHistory: this.props.orderHistory,\r\n                        // paid: this.props.tranAmount,\r\n                        preview: true,\r\n                        printer: localStorage.getItem(\"printer\"),\r\n                      },\r\n                      { headers: { \"x-auth-token\": localStorage.getItem(\"token\") } }\r\n                    );\r\n                  }}\r\n                >\r\n                  Print Bill Preview\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\components\\OrderSheet.js",["119","120","121","122","123","124","125","126"],"import axios from \"axios\";\r\nimport React, { Component, Fragment } from \"react\";\r\nimport { Tab, Row, Col, Nav } from \"react-bootstrap\";\r\nimport AlertDiv from \"../AlertDiv\";\r\nimport Payment from \"./Payment\";\r\n\r\nexport default class OrderSheet extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  afterDisc = () => {\r\n    this.props.getRestaurants();\r\n  };\r\n  state = { proposedChanges: { order: [], sum: 0, reason: \"\" }, historyCopy: { order: [], sum: 0 } };\r\n  render() {\r\n    var menu = this.props.menu;\r\n    var categories = Object.keys(this.props.menu);\r\n    var propsTable = this.props.table;\r\n    propsTable.projectedTotal = propsTable.orderHistory.sum + propsTable.orderChange.sum;\r\n    return (\r\n      <div>\r\n        <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"category-0\">\r\n          <Row>\r\n            <Col sm={2} style={{ border: \"1px solid black\", bottom: 0, top: 0, overflow: \"auto\" }}>\r\n              <h3 style={{ backgroundColor: \"red\", color: \"white\" }}>Ordering for {propsTable.table}</h3>\r\n              <Nav varient=\"pills\" className=\"flex-column\">\r\n                {categories.map((category, i2) => {\r\n                  return (\r\n                    <Nav.Item>\r\n                      <Nav.Link className={\"activeColor\"} style={{ borderBottom: \"1px solid black\" }} eventKey={\"category-\" + i2}>\r\n                        {category}\r\n                      </Nav.Link>\r\n                    </Nav.Item>\r\n                  );\r\n                })}\r\n              </Nav>\r\n            </Col>\r\n            <Col sm={6} style={{ border: \"1px solid black\" }}>\r\n              <Tab.Content>\r\n                {categories.map((category, i2) => {\r\n                  return (\r\n                    <Tab.Pane eventKey={\"category-\" + i2} title={category}>\r\n                      <div className=\"row\">\r\n                        {menu[category].map((item, _) => {\r\n                          return (\r\n                            <div\r\n                              style={{ backgroundColor: \"yellow\", border: \"1px dotted black\", verticalAlign: \"middle\" }}\r\n                              className=\"card col-md-3\"\r\n                              id={propsTable.table + \"-\" + item.name + \"-\" + item.price + \"-\" + localStorage.getItem(\"username\")}\r\n                              onClick={(e) => {\r\n                                e.preventDefault();\r\n                                if (!propsTable.orderChange) {\r\n                                  propsTable.orderChange = { order: [], sum: 0 };\r\n                                }\r\n                                var tabind = -1;\r\n                                for (var i3 = 0; i3 < propsTable.orderChange.order.length; i3++) {\r\n                                  if (propsTable.orderChange.order[i3].item === item.name) {\r\n                                    tabind = 1;\r\n                                    propsTable.orderChange.order[i3].quantity = propsTable.orderChange.order[i3].quantity + 1;\r\n                                    break;\r\n                                  }\r\n                                }\r\n                                if (tabind !== 1) {\r\n                                  propsTable.orderChange.order.push({\r\n                                    item: item.name,\r\n                                    category,\r\n                                    price: parseInt(item.price),\r\n                                    quantity: 1,\r\n                                  });\r\n                                }\r\n                                propsTable.orderChange.sum = parseInt(propsTable.orderChange.sum) + parseInt(item.price);\r\n                                propsTable.projectedTotal = propsTable.projectedTotal + parseInt(item.price);\r\n                                this.setState({});\r\n                              }}\r\n                            >\r\n                              <h5>{item.name}</h5>\r\n                              {item.price}\r\n                            </div>\r\n                          );\r\n                        })}\r\n                      </div>\r\n                    </Tab.Pane>\r\n                  );\r\n                })}\r\n              </Tab.Content>\r\n            </Col>\r\n            <Col sm={4} style={{ border: \"1px solid black\" }}>\r\n              {propsTable.orderChange ? (\r\n                <Fragment>\r\n                  <h3 style={{ backgroundColor: \"blue\", color: \"white\" }}>Running Order</h3>\r\n                  <br />\r\n                  <div>\r\n                    <table className=\"table table-bordered\">\r\n                      <thead>\r\n                        <tr>\r\n                          <th style={{ width: \"10%\" }} scope=\"col\">\r\n                            S no.\r\n                          </th>\r\n                          <th style={{ width: \"40%\" }} scope=\"col\">\r\n                            Item\r\n                          </th>\r\n                          <th style={{ width: \"10%\" }} scope=\"col\">\r\n                            Price\r\n                          </th>\r\n                          <th style={{ width: \"20%\" }} scope=\"col\">\r\n                            Quantity\r\n                          </th>\r\n                          <th style={{ width: \"20%\" }} scope=\"col\">\r\n                            Amount\r\n                          </th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {propsTable.orderChange.order.map((item, i1) => {\r\n                          return (\r\n                            <tr>\r\n                              <th scope=\"row\">{i1 + 1}</th>\r\n                              <td align=\"left\">{item.item}</td>\r\n                              <td> {item.price} </td>\r\n                              <td>\r\n                                <button\r\n                                  style={{ borderRadius: \"100%\" }}\r\n                                  onClick={() => {\r\n                                    var x = propsTable.orderChange.order[i1].quantity;\r\n                                    x = x - 1;\r\n                                    propsTable.orderChange.order[i1].quantity = x;\r\n                                    if (propsTable.orderChange.order[i1].quantity === 0) {\r\n                                      propsTable.orderChange.order.splice(i1, 1);\r\n                                    }\r\n                                    propsTable.orderChange.sum = parseInt(propsTable.orderChange.sum) - parseInt(item.price);\r\n                                    propsTable.projectedTotal = propsTable.projectedTotal - parseInt(item.price);\r\n                                    this.setState({});\r\n                                  }}\r\n                                >\r\n                                  -\r\n                                </button>\r\n                                {\" \" + item.quantity + \" \"}\r\n                                <button\r\n                                  style={{ borderRadius: \"100%\" }}\r\n                                  onClick={() => {\r\n                                    console.log(propsTable.orderHistory);\r\n                                    propsTable.orderChange.order[i1].quantity = propsTable.orderChange.order[i1].quantity + 1;\r\n\r\n                                    propsTable.orderChange.sum = propsTable.orderChange.sum + parseInt(item.price);\r\n                                    propsTable.projectedTotal = propsTable.projectedTotal + parseInt(item.price);\r\n                                    this.setState({});\r\n                                  }}\r\n                                >\r\n                                  +\r\n                                </button>\r\n                              </td>\r\n\r\n                              <td>{item.price * item.quantity}</td>\r\n                            </tr>\r\n                          );\r\n                        })}\r\n                        <tr>\r\n                          <td />\r\n                          <td />\r\n                          <td />\r\n                          <td />\r\n                          <th>{propsTable.orderChange.sum}</th>\r\n                        </tr>\r\n                      </tbody>\r\n                    </table>\r\n                    <h4>Projected Total: {propsTable.projectedTotal}</h4>\r\n                    <button\r\n                      className=\"btn btn-primary\"\r\n                      onClick={async (e) => {\r\n                        e.target.disabled = true;\r\n                        e.preventDefault();\r\n                        for (var i = 0; i < propsTable.orderChange.order.length; i++) {\r\n                          var c = 0;\r\n                          for (var j = 0; j < propsTable.orderHistory.order.length; j++) {\r\n                            if (propsTable.orderChange.order[i].item === propsTable.orderHistory.order[j].item) {\r\n                              propsTable.orderHistory.order[j].quantity = propsTable.orderHistory.order[j].quantity + propsTable.orderChange.order[i].quantity;\r\n                              c = 1;\r\n                              break;\r\n                            }\r\n                          }\r\n                          if (c === 0) {\r\n                            propsTable.orderHistory.order.push({ ...propsTable.orderChange.order[i] });\r\n                          }\r\n                        }\r\n                        propsTable.orderHistory.sum = propsTable.orderHistory.sum + propsTable.orderChange.sum;\r\n                        propsTable.balance = propsTable.balance + propsTable.orderChange.sum;\r\n                        var res = await axios.post(\r\n                          require(\"../config.json\").url + \"menu/updateTable\",\r\n                          { orderHistory: propsTable.orderHistory, orderChange: propsTable.orderChange, table: propsTable },\r\n                          { headers: { \"x-auth-token\": localStorage.getItem(\"token\") } }\r\n                        );\r\n                        AlertDiv(\"green\", \"Order Added\");\r\n                        try {\r\n                          console.log(propsTable);\r\n                          res = await axios.post(\r\n                            require(\"../config.json\").url + \"bill/printOrder\",\r\n                            {\r\n                              order: propsTable.orderChange,\r\n                              table: propsTable.table,\r\n                              bill: res.data.bill,\r\n                              orderId: res.data.orderId,\r\n                              printer: localStorage.getItem(\"printer\"),\r\n                              restaurant: propsTable.restaurant,\r\n                            },\r\n                            { headers: { \"x-auth-token\": localStorage.getItem(\"token\") } }\r\n                          );\r\n                        } catch (err) {\r\n                          console.log(err, err.response);\r\n                          AlertDiv(\"red\", \"Couldn't print bill\");\r\n                        }\r\n                        propsTable.bill = res.data.bill;\r\n                        propsTable.orderChange.order = [];\r\n                        propsTable.orderChange.sum = 0;\r\n                        e.target.disabled = false;\r\n                        this.setState({});\r\n                        this.props.getRestaurants();\r\n                      }}\r\n                      disabled={propsTable.orderChange.sum === 0 ? true : false}\r\n                    >\r\n                      Add to Order\r\n                    </button>\r\n                  </div>\r\n                </Fragment>\r\n              ) : null}\r\n              {/* Edit table */}\r\n              {propsTable.bill && propsTable.bill !== \"\" ? (\r\n                <Fragment>\r\n                  {!this.state.edit ? (\r\n                    <button\r\n                      disabled={propsTable.orderHistory.sum === 0}\r\n                      className=\"btn btn-primary\"\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        var order = [];\r\n                        propsTable.orderHistory.order.map((ord, _) => {\r\n                          order.push({ ...ord });\r\n                          return;\r\n                        });\r\n                        this.state.historyCopy = { order, sum: propsTable.orderHistory.sum };\r\n                        console.log(this.state.historyCopy);\r\n                        this.setState({ edit: true });\r\n                      }}\r\n                    >\r\n                      Edit Order\r\n                    </button>\r\n                  ) : (\r\n                    <Fragment>\r\n                      <form\r\n                        onSubmit={async (e) => {\r\n                          e.preventDefault();\r\n                          console.log(this.state.proposedChanges, this.state.historyCopy);\r\n                          await axios.post(\r\n                            require(\"../config.json\").url + \"bill/editBill\",\r\n                            { table: propsTable.id, bill: propsTable.bill, orderHistory: this.state.historyCopy, orderChange: this.state.proposedChanges },\r\n                            { headers: { \"x-auth-token\": localStorage.getItem(\"token\") } }\r\n                          );\r\n                          propsTable.orderHistory = this.state.historyCopy;\r\n\r\n                          propsTable.balance = propsTable.balance - this.state.proposedChanges.sum;\r\n                          this.setState({ edit: false, proposedChanges: { reason: \"\", sum: 0, order: [] } });\r\n                        }}\r\n                      >\r\n                        <table className=\"table table-bordered\">\r\n                          <thead>\r\n                            <tr>\r\n                              <th style={{ width: \"10%\" }} scope=\"col\">\r\n                                S no.\r\n                              </th>\r\n                              <th style={{ width: \"40%\" }} scope=\"col\">\r\n                                Item\r\n                              </th>\r\n                              <th style={{ width: \"10%\" }} scope=\"col\">\r\n                                Price\r\n                              </th>\r\n                              <th style={{ width: \"20%\" }} scope=\"col\">\r\n                                Quantity\r\n                              </th>\r\n                              <th style={{ width: \"20%\" }} scope=\"col\">\r\n                                Amount\r\n                              </th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            {this.state.historyCopy.order.map((item, i1) => {\r\n                              return (\r\n                                <tr>\r\n                                  <th scope=\"row\">{i1 + 1}</th>\r\n                                  <td align=\"left\">{item.item}</td>\r\n                                  <td> {item.price} </td>\r\n                                  <td>\r\n                                    <button\r\n                                      style={{ borderRadius: \"100%\" }}\r\n                                      onClick={(e) => {\r\n                                        e.preventDefault();\r\n                                        console.log(this.state.historyCopy);\r\n                                        var x = this.state.historyCopy.order[i1].quantity;\r\n                                        x = x - 1;\r\n                                        this.state.historyCopy.order[i1].quantity = x;\r\n                                        var c = 0;\r\n\r\n                                        for (var i = 0; i < this.state.proposedChanges.order.length; i++) {\r\n                                          if (this.state.proposedChanges.order[i].item === this.state.historyCopy.order[i1].item) {\r\n                                            this.state.proposedChanges.order[i].quantity = this.state.proposedChanges.order[i].quantity + 1;\r\n                                            c = 1;\r\n                                            break;\r\n                                          }\r\n                                        }\r\n\r\n                                        if (c === 0) {\r\n                                          this.state.proposedChanges.order.push({ item: item.item, price: parseInt(item.price), quantity: 1 });\r\n                                        }\r\n\r\n                                        this.state.historyCopy.sum = parseInt(this.state.historyCopy.sum) - parseInt(item.price);\r\n\r\n                                        if (this.state.historyCopy.order[i1].quantity === 0) {\r\n                                          this.state.historyCopy.order.splice(i1, 1);\r\n                                        }\r\n                                        this.state.proposedChanges.sum = this.state.proposedChanges.sum + parseInt(item.price);\r\n                                        this.setState({});\r\n                                      }}\r\n                                    >\r\n                                      -\r\n                                    </button>\r\n                                    {\" \" + item.quantity + \" \"}\r\n                                    {/* <button\r\n                              style={{ borderRadius: \"100%\" }}\r\n                              onClick={() => {\r\n                                console.log(propsTable.orderHistory);\r\n                                propsTable.orderChange.order[i1].quantity = propsTable.orderChange.order[i1].quantity + 1;\r\n\r\n                                propsTable.orderChange.sum = propsTable.orderChange.sum + parseInt(item.price);\r\n                                propsTable.projectedTotal = propsTable.projectedTotal + parseInt(item.price);\r\n                                this.setState({});\r\n                              }}\r\n                            >\r\n                              +\r\n                            </button> */}\r\n                                  </td>\r\n\r\n                                  <td>{item.price * item.quantity}</td>\r\n                                </tr>\r\n                              );\r\n                            })}\r\n                            <tr>\r\n                              <td />\r\n                              <td />\r\n                              <td />\r\n                              <td />\r\n                              <th>{this.state.historyCopy.sum}</th>\r\n                            </tr>\r\n                          </tbody>\r\n                        </table>\r\n                        <input\r\n                          type=\"text\"\r\n                          required\r\n                          className=\"form-control\"\r\n                          placeholder=\"Reason for Changes\"\r\n                          value={this.state.proposedChanges.reason}\r\n                          onChange={(e) => {\r\n                            e.preventDefault();\r\n                            this.state.proposedChanges.reason = e.target.value;\r\n                            this.setState({});\r\n                          }}\r\n                        />\r\n                        <input type=\"submit\" className=\"btn\" value=\"Done\" />\r\n                      </form>\r\n                    </Fragment>\r\n                  )}\r\n                </Fragment>\r\n              ) : null}\r\n              <table className=\"table table-bordered\">\r\n                <thead>\r\n                  <tr>\r\n                    <th scope=\"col\">S No.</th>\r\n                    <th scope=\"col\">Item</th>\r\n                    <th scope=\"col\">Price</th>\r\n                    <th scope=\"col\">Quantity</th>\r\n                    <th scope=\"col\">Amount</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {propsTable.orderHistory.order.map((item, i1) => {\r\n                    return (\r\n                      <tr>\r\n                        <th scope=\"row\">{i1 + 1}</th>\r\n                        <td>{item.item}</td>\r\n                        <td>{item.price}</td>\r\n                        <td>{item.quantity}</td>\r\n                        <td>{item.price * item.quantity}</td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n                  <tr>\r\n                    <td />\r\n                    <td />\r\n                    <td />\r\n                    <td />\r\n                    <th>{propsTable.orderHistory.sum}</th>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n              <h4>Balance: {propsTable.balance ? propsTable.balance : 0}</h4>\r\n              {propsTable.bill && propsTable.bill !== \"\" ? (\r\n                <Fragment>\r\n                  <Payment\r\n                    restaurant={propsTable.restaurant}\r\n                    amount={propsTable.balance ? propsTable.balance : 0}\r\n                    disable={propsTable.orderChange.sum !== 0 || propsTable.orderHistory.sum === 0 ? true : false}\r\n                    bill={propsTable.bill}\r\n                    table={propsTable.id}\r\n                    orderHistory={propsTable.orderHistory}\r\n                    setState={this.setState1}\r\n                    afterDisc={this.afterDisc}\r\n                    callBack={async (amount) => {\r\n                      console.log(amount);\r\n                      propsTable.balance = propsTable.balance - amount;\r\n                      this.setState({});\r\n                      if (propsTable.balance !== 0) return;\r\n                      else {\r\n                        await axios.post(require(\"../config.json\").url + \"menu/freeTable\", { table: propsTable }, { headers: { \"x-auth-token\": localStorage.getItem(\"token\") } });\r\n                        propsTable.orderHistory.order = [];\r\n                        propsTable.orderHistory.sum = 0;\r\n                        propsTable.balance = 0;\r\n                      }\r\n                      this.afterDisc();\r\n                      this.setState({});\r\n                    }}\r\n                  />\r\n                </Fragment>\r\n              ) : null}\r\n              <button\r\n                hidden\r\n                className=\"btn btn-primary\"\r\n                onClick={async (e) => {\r\n                  e.preventDefault();\r\n\r\n                  //   Payment logic as needed\r\n                  await axios.post(require(\"../config.json\").url + \"menu/freeTable\", { table: propsTable }, { headers: { \"x-auth-token\": localStorage.getItem(\"token\") } });\r\n                  propsTable.orderHistory.order = [];\r\n                  propsTable.orderHistory.sum = 0;\r\n                  propsTable.balance = 0;\r\n                  this.setState({});\r\n                }}\r\n                // disabled={propsTable.orderChange.sum !== 0 || propsTable.orderHistory.sum === 0 ? true : false}\r\n              >\r\n                Free Table\r\n              </button>\r\n            </Col>\r\n          </Row>\r\n        </Tab.Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\components\\Booking.js",[],"C:\\Users\\aknar\\Documents\\GitHub\\mall-restaurant\\client\\src\\components\\Report.js",[],{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","severity":1,"message":"132","line":293,"column":27,"nodeType":"133","endLine":293,"endColumn":37},{"ruleId":"131","severity":1,"message":"132","line":294,"column":27,"nodeType":"133","endLine":294,"endColumn":37},{"ruleId":"134","severity":1,"message":"135","line":4,"column":10,"nodeType":"136","messageId":"137","endLine":4,"endColumn":15},{"ruleId":"138","severity":1,"message":"139","line":8,"column":3,"nodeType":"140","messageId":"141","endLine":10,"endColumn":4},{"ruleId":"142","severity":1,"message":"143","line":237,"column":27,"nodeType":"144","messageId":"145","endLine":237,"endColumn":34},{"ruleId":"131","severity":1,"message":"132","line":239,"column":25,"nodeType":"133","endLine":239,"endColumn":35},{"ruleId":"131","severity":1,"message":"132","line":298,"column":41,"nodeType":"133","endLine":298,"endColumn":73},{"ruleId":"131","severity":1,"message":"132","line":303,"column":45,"nodeType":"133","endLine":303,"endColumn":80},{"ruleId":"131","severity":1,"message":"132","line":313,"column":41,"nodeType":"133","endLine":313,"endColumn":63},{"ruleId":"131","severity":1,"message":"132","line":318,"column":41,"nodeType":"133","endLine":318,"endColumn":67},{"ruleId":"131","severity":1,"message":"132","line":361,"column":29,"nodeType":"133","endLine":361,"endColumn":55},"no-native-reassign",["146"],"no-negated-in-lhs",["147"],"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-unused-vars","'Alert' is defined but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","no-global-assign","no-unsafe-negation"]